plugins {
    id 'java'
    id 'war'
    id "io.freefair.lombok" version "8.3"
}

group = 'by.clevertec.proxy'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaLanguageVersion.of(17)
    targetCompatibility = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
}

ext {
    postgresqlVersion = '42.6.0'
    snakeyamlVersion = '2.1'
    junitVersion = '5.10.1'
    mockitoVersion = '5.6.0'
    mapstructVersion = '1.5.5.Final'
    assertjVersion = '3.24.2'
    log4jVersion = '2.20.0'
    dbcpVersion = '2.11.0'
    dbutilsVersion = '1.8.1'
    mybatisVersion = '3.5.14'
    aspectjVersion = '1.9.20.1'
    itextpdfVersion = '5.5.13.3'
    jacksonVersion = '2.16.0'
    flywaydbVersion = '10.3.0'
    servletVersion = '6.0.0'
    springframeworkVersion = '6.1.2'
}

compileJava {
    options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true'
    ]
}

dependencies {
    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.commons:commons-dbcp2:${dbcpVersion}"
    implementation "commons-dbutils:commons-dbutils:${dbutilsVersion}"
    implementation "org.mybatis:mybatis:${mybatisVersion}"
    implementation "org.aspectj:aspectjrt:${aspectjVersion}"
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"
    implementation "com.itextpdf:itextpdf:${itextpdfVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.flywaydb:flyway-core:${flywaydbVersion}"
    implementation "org.springframework:spring-context:${springframeworkVersion}"
    implementation "org.springframework:spring-core:${springframeworkVersion}"
    implementation "org.springframework:spring-web:${springframeworkVersion}"
    implementation "org.springframework:spring-webmvc:${springframeworkVersion}"
    implementation "org.springframework:spring-aspects:${springframeworkVersion}"

    runtimeOnly "org.flywaydb:flyway-database-postgresql:${flywaydbVersion}"

    providedCompile "org.mapstruct:mapstruct:${mapstructVersion}"
    providedCompile "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    providedCompile "jakarta.servlet:jakarta.servlet-api:${servletVersion}"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation "org.springframework:spring-test:${springframeworkVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation platform ("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

configurations {
    aspectpath
}

tasks.register("aspectPath", Copy) {
    from(configurations.aspectpath)
    into(sourceSets.main.output.classesDirs.getSingleFile())
}

compileJava {
    dependsOn(tasks.named("aspectPath"))
}

jar {
    enabled = false
}

war {
    archiveFileName = "servlet-${version}.war"
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(sourceSets.main.output)
    manifest {
        attributes 'Implementation-Title': 'servlet',
                   'Implementation-Version': version
    }
}

test {
    useJUnitPlatform()
}
